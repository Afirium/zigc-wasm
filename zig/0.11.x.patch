From 84992b66b82be05999f81607855d0ada60e38c84 Mon Sep 17 00:00:00 2001
From: Afirium <afirium@proton.me>
Date: Mon, 8 Apr 2024 23:11:32 +0300
Subject: [PATCH] feat: add zigc wasm target

---
 build.zig                 | 2 +-
 src/link.zig              | 6 +++---
 src/link/Wasm/Archive.zig | 4 +---
 src/main.zig              | 8 ++++----
 4 files changed, 9 insertions(+), 11 deletions(-)

diff --git a/build.zig b/build.zig
index 7176ecfddf..b3fda61e22 100644
--- a/build.zig
+++ b/build.zig
@@ -232,7 +232,7 @@ pub fn build(b: *std.Build) !void {
     exe_options.addOption(bool, "llvm_has_xtensa", llvm_has_xtensa);
     exe_options.addOption(bool, "force_gpa", force_gpa);
     exe_options.addOption(bool, "only_c", only_c);
-    exe_options.addOption(bool, "only_core_functionality", only_c);
+    exe_options.addOption(bool, "only_core_functionality", true);
 
     if (link_libc) {
         exe.linkLibC();
diff --git a/src/link.zig b/src/link.zig
index 2fea01ff89..1a3821a52f 100644
--- a/src/link.zig
+++ b/src/link.zig
@@ -788,9 +788,9 @@ pub const File = struct {
     /// Commit pending changes and write headers. Takes into account final output mode
     /// and `use_lld`, not only `effectiveOutputMode`.
     pub fn flush(base: *File, comp: *Compilation, prog_node: *std.Progress.Node) FlushError!void {
-        if (build_options.only_c) {
-            assert(base.tag == .c);
-            return @fieldParentPtr(C, "base", base).flush(comp, prog_node);
+        if (true) {
+            assert(base.tag == .wasm);
+            return @fieldParentPtr(Wasm, "base", base).flush(comp, prog_node);
         }
         if (comp.clang_preprocessor_mode == .yes) {
             const emit = base.options.emit orelse return; // -fno-emit-bin
diff --git a/src/link/Wasm/Archive.zig b/src/link/Wasm/Archive.zig
index c4fb9b8291..b18290f140 100644
--- a/src/link/Wasm/Archive.zig
+++ b/src/link/Wasm/Archive.zig
@@ -208,9 +208,7 @@ pub fn parseObject(archive: Archive, allocator: Allocator, file_offset: u32) !Ob
 
     const object_name = try archive.parseName(header);
     const name = name: {
-        var buffer: [std.fs.MAX_PATH_BYTES]u8 = undefined;
-        const path = try std.os.realpath(archive.name, &buffer);
-        break :name try std.fmt.allocPrint(allocator, "{s}({s})", .{ path, object_name });
+        break :name try std.fmt.allocPrint(allocator, "{s}({s})", .{ archive.name, object_name });
     };
     defer allocator.free(name);
 
diff --git a/src/main.zig b/src/main.zig
index a45fe841a8..2a82312e4b 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -201,7 +201,7 @@ pub fn main() anyerror!void {
     }
 
     // Short circuit some of the other logic for bootstrapping.
-    if (build_options.only_c) {
+    if (true) {
         if (mem.eql(u8, args[1], "build-exe")) {
             return buildOutputType(gpa, arena, args, .{ .build = .Exe });
         } else if (mem.eql(u8, args[1], "build-obj")) {
@@ -1600,7 +1600,7 @@ fn buildOutputType(
             }
         },
         .cc, .cpp => {
-            if (build_options.only_c) unreachable;
+            if (true) unreachable;
 
             emit_h = .no;
             soname = .no;
@@ -3404,7 +3404,7 @@ fn buildOutputType(
     switch (listen) {
         .none => {},
         .stdio => {
-            if (build_options.only_c) unreachable;
+            if (true) unreachable;
             try serve(
                 comp,
                 std.io.getStdIn(),
@@ -3452,7 +3452,7 @@ fn buildOutputType(
         error.SemanticAnalyzeFail => if (listen == .none) process.exit(1),
         else => |e| return e,
     };
-    if (build_options.only_c) return cleanExit();
+    if (true) return cleanExit();
     try comp.makeBinFileExecutable();
 
     if (test_exec_args.items.len == 0 and object_format == .c) default_exec_args: {
-- 
2.34.1

